# Automated Release Workflow
#
#   Triggers: When you push a version tag (e.g., v1.0.0)
#
#   Platforms built:
#   - Linux: x86_64, ARM64 (aarch64)
#   - macOS: x86_64, Apple Silicon (ARM64)
#   - Windows: x86_64, ARM64
#
#   What it does:
#   1. Creates a GitHub release
#   2. Builds binaries for all 6 platform combinations
#   3. Packages them (.tar.gz for Unix, .zip for Windows)
#   4. Uploads as release assets

name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build:
    name: Build ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: silva
            asset_name: silva-linux-x86_64

          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: silva
            asset_name: silva-linux-aarch64

          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: silva
            asset_name: silva-macos-x86_64

          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: silva
            asset_name: silva-macos-aarch64

          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: silva.exe
            asset_name: silva-windows-x86_64.exe

          # Windows ARM64
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            artifact_name: silva.exe
            asset_name: silva-windows-aarch64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip ${{ matrix.artifact_name }} || true
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          mv ${{ matrix.asset_name }}.tar.gz ../../../

      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}

      - name: Upload Release Asset (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          asset_content_type: application/zip
